{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\LENOVO\\\\Documents\\\\Memberr\\\\React_classes\\\\React_Router_Deep\\\\12-adv-starting-project\\\\frontend\\\\src\\\\pages\\\\Events.js\",\n  _s = $RefreshSig$();\nimport { useLoaderData, json, defer, Await } from 'react-router-dom';\nimport EventsList from '../components/EventsList';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function EventsPage() {\n  _s();\n  const {\n    events\n  } = useLoaderData(); //Isso serve para pegar o dado de um loader na pagina em que ele reside ou num componente atrelado a essa pagina\n\n  return /*#__PURE__*/_jsxDEV(Await, {\n    resolve: events,\n    children: loadeEvents => /*#__PURE__*/_jsxDEV(EventsList, {\n      events: loadeEvents\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 31\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 9,\n    columnNumber: 9\n  }, this);\n}\n_s(EventsPage, \"22Av1LduzrZxSsk8kXUUCix36lQ=\", false, function () {\n  return [useLoaderData];\n});\n_c = EventsPage;\nexport async function loadeEvents() {\n  const response = await fetch('http://localhost:8080/events');\n  if (!response.ok) {\n    // return {isError: true, message: 'Failed to fetch events.'};\n    // throw new Response(JSON.stringify({message: 'Could not fetch events.'}), {satatus: 500});\n    throw json({\n      message: 'Could not fetch events.'\n    }, {\n      status: 500\n    });\n  } else {\n    return response;\n  }\n} //Esse loader serve para pegar os dados da API e passar para a pagina\n\nexport function loader() {\n  return defer({\n    //nesse defer você pode passar um objeto com todos os https requests que têm nessa pagina, cada propriedade é um request\n    events: loadeEvents() //o retorno deve ser um promise\n  });\n}\nvar _c;\n$RefreshReg$(_c, \"EventsPage\");","map":{"version":3,"names":["useLoaderData","json","defer","Await","EventsList","jsxDEV","_jsxDEV","EventsPage","_s","events","resolve","children","loadeEvents","fileName","_jsxFileName","lineNumber","columnNumber","_c","response","fetch","ok","message","status","loader","$RefreshReg$"],"sources":["C:/Users/LENOVO/Documents/Memberr/React_classes/React_Router_Deep/12-adv-starting-project/frontend/src/pages/Events.js"],"sourcesContent":["import { useLoaderData, json, defer, Await } from 'react-router-dom';\r\nimport EventsList from '../components/EventsList';\r\n\r\nexport default function EventsPage() {\r\n\r\n    const {events} = useLoaderData(); //Isso serve para pegar o dado de um loader na pagina em que ele reside ou num componente atrelado a essa pagina\r\n\r\n    return (\r\n        <Await resolve={events}>{/*Esse await serve para esperar o dado ser carregado, ele é bom para quando você quer carregar um dado antes de renderizar a página, ele está atrelado ao defer*/}\r\n            {(loadeEvents) => <EventsList events={loadeEvents} />}{/*Esse é o children do await, ele é uma função que é chamada quando o dado é carregado, ele é bom para renderizar o dado que foi carregado*/}\r\n        </Await>\r\n    );\r\n}\r\n\r\nexport async function loadeEvents() {\r\n    const response = await fetch('http://localhost:8080/events');\r\n\r\n    if (!response.ok) {\r\n        // return {isError: true, message: 'Failed to fetch events.'};\r\n        // throw new Response(JSON.stringify({message: 'Could not fetch events.'}), {satatus: 500});\r\n        throw json({ message: 'Could not fetch events.' }, { status: 500 });\r\n    } else {\r\n        return response;\r\n    }\r\n}//Esse loader serve para pegar os dados da API e passar para a pagina\r\n\r\nexport function loader() {\r\n    return defer({ //nesse defer você pode passar um objeto com todos os https requests que têm nessa pagina, cada propriedade é um request\r\n        events: loadeEvents(), //o retorno deve ser um promise\r\n    });\r\n}"],"mappings":";;AAAA,SAASA,aAAa,EAAEC,IAAI,EAAEC,KAAK,EAAEC,KAAK,QAAQ,kBAAkB;AACpE,OAAOC,UAAU,MAAM,0BAA0B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAElD,eAAe,SAASC,UAAUA,CAAA,EAAG;EAAAC,EAAA;EAEjC,MAAM;IAACC;EAAM,CAAC,GAAGT,aAAa,CAAC,CAAC,CAAC,CAAC;;EAElC,oBACIM,OAAA,CAACH,KAAK;IAACO,OAAO,EAAED,MAAO;IAAAE,QAAA,EACjBC,WAAW,iBAAKN,OAAA,CAACF,UAAU;MAACK,MAAM,EAAEG;IAAY;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAClD,CAAC;AAEhB;AAACR,EAAA,CATuBD,UAAU;EAAA,QAEbP,aAAa;AAAA;AAAAiB,EAAA,GAFVV,UAAU;AAWlC,OAAO,eAAeK,WAAWA,CAAA,EAAG;EAChC,MAAMM,QAAQ,GAAG,MAAMC,KAAK,CAAC,8BAA8B,CAAC;EAE5D,IAAI,CAACD,QAAQ,CAACE,EAAE,EAAE;IACd;IACA;IACA,MAAMnB,IAAI,CAAC;MAAEoB,OAAO,EAAE;IAA0B,CAAC,EAAE;MAAEC,MAAM,EAAE;IAAI,CAAC,CAAC;EACvE,CAAC,MAAM;IACH,OAAOJ,QAAQ;EACnB;AACJ,CAAC;;AAED,OAAO,SAASK,MAAMA,CAAA,EAAG;EACrB,OAAOrB,KAAK,CAAC;IAAE;IACXO,MAAM,EAAEG,WAAW,CAAC,CAAC,CAAE;EAC3B,CAAC,CAAC;AACN;AAAC,IAAAK,EAAA;AAAAO,YAAA,CAAAP,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}