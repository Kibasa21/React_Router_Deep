{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\LENOVO\\\\Documents\\\\Memberr\\\\React_classes\\\\React_Router_Deep\\\\12-adv-starting-project\\\\frontend\\\\src\\\\pages\\\\EventsDetail.js\",\n  _s = $RefreshSig$();\nimport { Await, defer, json, redirect, useRouteLoaderData } from \"react-router-dom\";\nimport EventItem from \"../components/EventItem\";\nimport EventsList from \"../components/EventsList\";\nimport { Suspense } from \"react\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function EventsDetailPage() {\n  _s();\n  const {\n    event,\n    events\n  } = useRouteLoaderData('event-detail'); //Isso serve para pegar o dado de um loader na pagina em que ele reside ou num componente atrelado a essa pagina\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Suspense, {\n      fallback: /*#__PURE__*/_jsxDEV(\"p\", {\n        style: {\n          textAlign: 'center'\n        },\n        children: \"Loading...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 13,\n        columnNumber: 33\n      }, this),\n      children: /*#__PURE__*/_jsxDEV(Await, {\n        children: loadEvent => /*#__PURE__*/_jsxDEV(EventItem, {\n          event: loadEvent\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 15,\n          columnNumber: 35\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 14,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Suspense, {\n      fallback: /*#__PURE__*/_jsxDEV(\"p\", {\n        style: {\n          textAlign: 'center'\n        },\n        children: \"Loading...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 18,\n        columnNumber: 33\n      }, this),\n      children: /*#__PURE__*/_jsxDEV(Await, {\n        children: loadEvent => /*#__PURE__*/_jsxDEV(EventsList, {\n          events: loadEvent\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 20,\n          columnNumber: 35\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 19,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n}\n_s(EventsDetailPage, \"RYHFM3+vnAtCT3vK8ii1+i0+Nsk=\", false, function () {\n  return [useRouteLoaderData];\n});\n_c = EventsDetailPage;\nasync function loadEvent(id) {\n  const response = await fetch('http://localhost:8080/events/' + id); //Isso serve para dar load no dado atrelado ao evento clicado, o qual tem seu próprio id\n\n  if (!response.ok) {\n    throw json({\n      message: 'Could not fetch details for selected event.'\n    }, {\n      status: 500\n    });\n  } else {\n    const resData = await response.json(); //Tive que fazer parse pq o defer não já faz parse\n    return resData.events;\n  }\n}\nasync function loadedEvents() {\n  const response = await fetch('http://localhost:8080/events');\n  if (!response.ok) {\n    // return {isError: true, message: 'Failed to fetch events.'};\n    // throw new Response(JSON.stringify({message: 'Could not fetch events.'}), {satatus: 500});\n    throw json({\n      message: 'Could not fetch events.'\n    }, {\n      status: 500\n    });\n  } else {\n    const resData = await response.json(); //Tive que fazer parse pq o defer não já faz parse\n    return resData.events;\n  }\n} //Esse loader serve para pegar os dados da API e passar para a pagina\n\nexport async function loader({\n  request,\n  params\n}) {\n  const id = params.eventId; //Esse params é o que está no path do App.js, O params serve para pegar os parametros da URL\n\n  return defer({\n    event: loadEvent(id),\n    events: loadedEvents()\n  });\n}\nexport async function action({\n  params,\n  request\n}) {\n  //A diferença entre action e loader é que o action é executado no frontend, enquanto o loader é executado no backend\n\n  const id = params.eventId;\n  const response = await fetch('http://localhost:8080/events/' + id, {\n    method: request.method //O request é o que foi passado pelo eventItem no App.js, mas podem ser outros, por isso ele ta pegando o input.\n  });\n  if (!response.ok) {\n    throw json({\n      message: 'Could not delete event.'\n    }, {\n      status: 500\n    });\n  } else {\n    return redirect('/events');\n  }\n}\nvar _c;\n$RefreshReg$(_c, \"EventsDetailPage\");","map":{"version":3,"names":["Await","defer","json","redirect","useRouteLoaderData","EventItem","EventsList","Suspense","jsxDEV","_jsxDEV","Fragment","_Fragment","EventsDetailPage","_s","event","events","children","fallback","style","textAlign","fileName","_jsxFileName","lineNumber","columnNumber","loadEvent","_c","id","response","fetch","ok","message","status","resData","loadedEvents","loader","request","params","eventId","action","method","$RefreshReg$"],"sources":["C:/Users/LENOVO/Documents/Memberr/React_classes/React_Router_Deep/12-adv-starting-project/frontend/src/pages/EventsDetail.js"],"sourcesContent":["import { Await, defer, json, redirect, useRouteLoaderData } from \"react-router-dom\";\r\n\r\nimport EventItem from \"../components/EventItem\";\r\nimport EventsList from \"../components/EventsList\";\r\nimport { Suspense } from \"react\";\r\n\r\nexport default function EventsDetailPage() {\r\n\r\n    const { event, events } = useRouteLoaderData('event-detail'); //Isso serve para pegar o dado de um loader na pagina em que ele reside ou num componente atrelado a essa pagina\r\n\r\n    return (\r\n        <>\r\n            <Suspense fallback={<p style={{ textAlign: 'center' }}>Loading...</p>}>\r\n                <Await>\r\n                    {loadEvent => <EventItem event={loadEvent} />}\r\n                </Await>\r\n            </Suspense>\r\n            <Suspense fallback={<p style={{ textAlign: 'center' }}>Loading...</p>}>\r\n                <Await>\r\n                    {loadEvent => <EventsList events={loadEvent} />}\r\n                </Await>\r\n            </Suspense>\r\n        </>\r\n    );\r\n}\r\n\r\nasync function loadEvent(id) {\r\n    const response = await fetch('http://localhost:8080/events/' + id) //Isso serve para dar load no dado atrelado ao evento clicado, o qual tem seu próprio id\r\n\r\n    if (!response.ok) {\r\n        throw json({ message: 'Could not fetch details for selected event.' }, { status: 500 })\r\n    } else {\r\n        const resData = await response.json(); //Tive que fazer parse pq o defer não já faz parse\r\n        return resData.events;\r\n    }\r\n}\r\n\r\nasync function loadedEvents() {\r\n    const response = await fetch('http://localhost:8080/events');\r\n\r\n    if (!response.ok) {\r\n        // return {isError: true, message: 'Failed to fetch events.'};\r\n        // throw new Response(JSON.stringify({message: 'Could not fetch events.'}), {satatus: 500});\r\n        throw json({ message: 'Could not fetch events.' }, { status: 500 });\r\n    } else {\r\n        const resData = await response.json(); //Tive que fazer parse pq o defer não já faz parse\r\n        return resData.events;\r\n    }\r\n}//Esse loader serve para pegar os dados da API e passar para a pagina\r\n\r\nexport async function loader({ request, params }) {\r\n\r\n    const id = params.eventId; //Esse params é o que está no path do App.js, O params serve para pegar os parametros da URL\r\n\r\n    return defer({\r\n        event: loadEvent(id),\r\n        events: loadedEvents(),\r\n    });\r\n}\r\n\r\nexport async function action({ params, request }) { //A diferença entre action e loader é que o action é executado no frontend, enquanto o loader é executado no backend\r\n\r\n    const id = params.eventId;\r\n\r\n    const response = await fetch('http://localhost:8080/events/' + id, {\r\n        method: request.method, //O request é o que foi passado pelo eventItem no App.js, mas podem ser outros, por isso ele ta pegando o input.\r\n    });\r\n\r\n    if (!response.ok) {\r\n        throw json({ message: 'Could not delete event.' }, { status: 500 })\r\n    } else {\r\n        return redirect('/events');\r\n    }\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}