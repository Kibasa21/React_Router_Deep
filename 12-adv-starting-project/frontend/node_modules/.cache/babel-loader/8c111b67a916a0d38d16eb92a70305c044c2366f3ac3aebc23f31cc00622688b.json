{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\LENOVO\\\\Documents\\\\Memberr\\\\React_classes\\\\React_Router_Deep\\\\12-adv-starting-project\\\\frontend\\\\src\\\\pages\\\\NewEvent.js\";\nimport { json, redirect } from \"react-router-dom\";\nimport EventForm from \"../components/EventForm\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function NewEventPage() {\n  return /*#__PURE__*/_jsxDEV(EventForm, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 6,\n    columnNumber: 9\n  }, this);\n}\n_c = NewEventPage;\nexport async function action({\n  request,\n  params\n}) {\n  const data = await request.formData(); //O request é o que foi passado pelo Form do EditEventPage no App.js, e o formData é um método que pega os dados do formulário\n\n  const eventData = {\n    title: data.get('title'),\n    image: data.get('image'),\n    date: data.get('date'),\n    description: data.get('description')\n  }; //O get é um método que pega o valor do input com o name passado\n\n  const response = await fetch('http://localhost:8080/events', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(eventData)\n  });\n  if (!response.ok) {\n    throw json({\n      message: 'Could no save event.'\n    }, {\n      status: 500\n    });\n  } else {\n    return redirect('/events');\n  }\n}\nvar _c;\n$RefreshReg$(_c, \"NewEventPage\");","map":{"version":3,"names":["json","redirect","EventForm","jsxDEV","_jsxDEV","NewEventPage","fileName","_jsxFileName","lineNumber","columnNumber","_c","action","request","params","data","formData","eventData","title","get","image","date","description","response","fetch","method","headers","body","JSON","stringify","ok","message","status","$RefreshReg$"],"sources":["C:/Users/LENOVO/Documents/Memberr/React_classes/React_Router_Deep/12-adv-starting-project/frontend/src/pages/NewEvent.js"],"sourcesContent":["import { json, redirect } from \"react-router-dom\";\r\nimport EventForm from \"../components/EventForm\";\r\n\r\nexport default function NewEventPage() {\r\n    return (\r\n        <EventForm />\r\n    );\r\n}\r\n\r\nexport async function action({request, params}) {\r\n\r\n    const data = await request.formData(); //O request é o que foi passado pelo Form do EditEventPage no App.js, e o formData é um método que pega os dados do formulário\r\n\r\n    const eventData = {\r\n        title: data.get('title'),\r\n        image: data.get('image'),\r\n        date: data.get('date'),\r\n        description: data.get('description')\r\n    } //O get é um método que pega o valor do input com o name passado\r\n    \r\n    const response = await fetch('http://localhost:8080/events', {\r\n        method: 'POST',\r\n        headers:{\r\n            'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify(eventData)\r\n    });\r\n\r\n    if(!response.ok) {\r\n        throw json({message: 'Could no save event.'}, {status: 500})\r\n    } else {\r\n        return redirect('/events');\r\n    }\r\n}"],"mappings":";AAAA,SAASA,IAAI,EAAEC,QAAQ,QAAQ,kBAAkB;AACjD,OAAOC,SAAS,MAAM,yBAAyB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEhD,eAAe,SAASC,YAAYA,CAAA,EAAG;EACnC,oBACID,OAAA,CAACF,SAAS;IAAAI,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC;AAErB;AAACC,EAAA,GAJuBL,YAAY;AAMpC,OAAO,eAAeM,MAAMA,CAAC;EAACC,OAAO;EAAEC;AAAM,CAAC,EAAE;EAE5C,MAAMC,IAAI,GAAG,MAAMF,OAAO,CAACG,QAAQ,CAAC,CAAC,CAAC,CAAC;;EAEvC,MAAMC,SAAS,GAAG;IACdC,KAAK,EAAEH,IAAI,CAACI,GAAG,CAAC,OAAO,CAAC;IACxBC,KAAK,EAAEL,IAAI,CAACI,GAAG,CAAC,OAAO,CAAC;IACxBE,IAAI,EAAEN,IAAI,CAACI,GAAG,CAAC,MAAM,CAAC;IACtBG,WAAW,EAAEP,IAAI,CAACI,GAAG,CAAC,aAAa;EACvC,CAAC,EAAC;;EAEF,MAAMI,QAAQ,GAAG,MAAMC,KAAK,CAAC,8BAA8B,EAAE;IACzDC,MAAM,EAAE,MAAM;IACdC,OAAO,EAAC;MACJ,cAAc,EAAE;IACpB,CAAC;IACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACZ,SAAS;EAClC,CAAC,CAAC;EAEF,IAAG,CAACM,QAAQ,CAACO,EAAE,EAAE;IACb,MAAM7B,IAAI,CAAC;MAAC8B,OAAO,EAAE;IAAsB,CAAC,EAAE;MAACC,MAAM,EAAE;IAAG,CAAC,CAAC;EAChE,CAAC,MAAM;IACH,OAAO9B,QAAQ,CAAC,SAAS,CAAC;EAC9B;AACJ;AAAC,IAAAS,EAAA;AAAAsB,YAAA,CAAAtB,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}