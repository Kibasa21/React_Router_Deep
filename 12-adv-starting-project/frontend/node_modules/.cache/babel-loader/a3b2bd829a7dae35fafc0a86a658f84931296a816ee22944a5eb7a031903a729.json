{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\LENOVO\\\\Documents\\\\Memberr\\\\React_classes\\\\React_Router_Deep\\\\12-adv-starting-project\\\\frontend\\\\src\\\\pages\\\\Events.js\",\n  _s = $RefreshSig$();\nimport { useLoaderData, json, defer, Await } from 'react-router-dom';\nimport EventsList from '../components/EventsList';\nimport { Suspense } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function EventsPage() {\n  _s();\n  const events = useLoaderData(); //Isso serve para pegar o dado de um loader na pagina em que ele reside ou num componente atrelado a essa pagina\n\n  return /*#__PURE__*/_jsxDEV(Suspense, {\n    fallback: /*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        textAlign: 'center'\n      },\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 29\n    }, this),\n    children: [\" \", /*#__PURE__*/_jsxDEV(Await, {\n      resolve: events,\n      children: loadeEvents => /*#__PURE__*/_jsxDEV(EventsList, {\n        events: loadeEvents\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 12,\n        columnNumber: 35\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 10,\n    columnNumber: 9\n  }, this);\n}\n_s(EventsPage, \"0qsQ0LJMbp4ZAcOenpedLepO/y4=\", false, function () {\n  return [useLoaderData];\n});\n_c = EventsPage;\nexport async function loadedEvents() {\n  const response = await fetch('http://localhost:8080/events');\n  if (!response.ok) {\n    // return {isError: true, message: 'Failed to fetch events.'};\n    // throw new Response(JSON.stringify({message: 'Could not fetch events.'}), {satatus: 500});\n    throw json({\n      message: 'Could not fetch events.'\n    }, {\n      status: 500\n    });\n  } else {\n    const resData = await response.json(); //Tive que fazer parse pq o defer não já faz parse\n    return resData.events;\n  }\n} //Esse loader serve para pegar os dados da API e passar para a pagina\n\nexport function loader() {\n  return defer({\n    //nesse defer você pode passar um objeto com todos os https requests que têm nessa pagina, cada propriedade é um request\n    events: loadedEvents() //o retorno deve ser um promise\n  });\n}\nvar _c;\n$RefreshReg$(_c, \"EventsPage\");","map":{"version":3,"names":["useLoaderData","json","defer","Await","EventsList","Suspense","jsxDEV","_jsxDEV","EventsPage","_s","events","fallback","style","textAlign","children","fileName","_jsxFileName","lineNumber","columnNumber","resolve","loadeEvents","_c","loadedEvents","response","fetch","ok","message","status","resData","loader","$RefreshReg$"],"sources":["C:/Users/LENOVO/Documents/Memberr/React_classes/React_Router_Deep/12-adv-starting-project/frontend/src/pages/Events.js"],"sourcesContent":["import { useLoaderData, json, defer, Await } from 'react-router-dom';\r\nimport EventsList from '../components/EventsList';\r\nimport { Suspense } from 'react';\r\n\r\nexport default function EventsPage() {\r\n\r\n    const events = useLoaderData(); //Isso serve para pegar o dado de um loader na pagina em que ele reside ou num componente atrelado a essa pagina\r\n\r\n    return (\r\n        <Suspense fallback={<p style={{textAlign: 'center'}}>Loading...</p>}> {/*Esse suspense serve para mostrar uma mensagem enquanto o dado está sendo carregado*/}\r\n            <Await resolve={events}>{/*Esse await serve para esperar o dado ser carregado, ele é bom para quando você quer carregar um dado antes de renderizar a página, ele está atrelado ao defer*/}\r\n                {(loadeEvents) => <EventsList events={loadeEvents} />}{/*Esse é o children do await, ele é uma função que é chamada quando o dado é carregado, ele é bom para renderizar o dado que foi carregado*/}\r\n            </Await>\r\n        </Suspense>\r\n    );\r\n}\r\n\r\nexport async function loadedEvents() {\r\n    const response = await fetch('http://localhost:8080/events');\r\n\r\n    if (!response.ok) {\r\n        // return {isError: true, message: 'Failed to fetch events.'};\r\n        // throw new Response(JSON.stringify({message: 'Could not fetch events.'}), {satatus: 500});\r\n        throw json({ message: 'Could not fetch events.' }, { status: 500 });\r\n    } else {\r\n        const resData = await response.json(); //Tive que fazer parse pq o defer não já faz parse\r\n        return resData.events;\r\n    }\r\n}//Esse loader serve para pegar os dados da API e passar para a pagina\r\n\r\nexport function loader() {\r\n    return defer({ //nesse defer você pode passar um objeto com todos os https requests que têm nessa pagina, cada propriedade é um request\r\n        events: loadedEvents(), //o retorno deve ser um promise\r\n    });\r\n}"],"mappings":";;AAAA,SAASA,aAAa,EAAEC,IAAI,EAAEC,KAAK,EAAEC,KAAK,QAAQ,kBAAkB;AACpE,OAAOC,UAAU,MAAM,0BAA0B;AACjD,SAASC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEjC,eAAe,SAASC,UAAUA,CAAA,EAAG;EAAAC,EAAA;EAEjC,MAAMC,MAAM,GAAGV,aAAa,CAAC,CAAC,CAAC,CAAC;;EAEhC,oBACIO,OAAA,CAACF,QAAQ;IAACM,QAAQ,eAAEJ,OAAA;MAAGK,KAAK,EAAE;QAACC,SAAS,EAAE;MAAQ,CAAE;MAAAC,QAAA,EAAC;IAAU;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAE;IAAAJ,QAAA,GAAC,GAAC,eAClEP,OAAA,CAACJ,KAAK;MAACgB,OAAO,EAAET,MAAO;MAAAI,QAAA,EACjBM,WAAW,iBAAKb,OAAA,CAACH,UAAU;QAACM,MAAM,EAAEU;MAAY;QAAAL,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAClD,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACF,CAAC;AAEnB;AAACT,EAAA,CAXuBD,UAAU;EAAA,QAEfR,aAAa;AAAA;AAAAqB,EAAA,GAFRb,UAAU;AAalC,OAAO,eAAec,YAAYA,CAAA,EAAG;EACjC,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,8BAA8B,CAAC;EAE5D,IAAI,CAACD,QAAQ,CAACE,EAAE,EAAE;IACd;IACA;IACA,MAAMxB,IAAI,CAAC;MAAEyB,OAAO,EAAE;IAA0B,CAAC,EAAE;MAAEC,MAAM,EAAE;IAAI,CAAC,CAAC;EACvE,CAAC,MAAM;IACH,MAAMC,OAAO,GAAG,MAAML,QAAQ,CAACtB,IAAI,CAAC,CAAC,CAAC,CAAC;IACvC,OAAO2B,OAAO,CAAClB,MAAM;EACzB;AACJ,CAAC;;AAED,OAAO,SAASmB,MAAMA,CAAA,EAAG;EACrB,OAAO3B,KAAK,CAAC;IAAE;IACXQ,MAAM,EAAEY,YAAY,CAAC,CAAC,CAAE;EAC5B,CAAC,CAAC;AACN;AAAC,IAAAD,EAAA;AAAAS,YAAA,CAAAT,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}