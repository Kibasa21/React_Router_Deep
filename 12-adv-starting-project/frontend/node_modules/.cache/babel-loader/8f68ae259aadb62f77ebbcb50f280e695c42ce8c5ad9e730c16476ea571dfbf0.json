{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\LENOVO\\\\Documents\\\\Memberr\\\\React_classes\\\\React_Router_Deep\\\\12-adv-starting-project\\\\frontend\\\\src\\\\App.js\";\n// Challenge / Exercise\n\n// 1. Add five new (dummy) page components (content can be simple <h1> elements)\n//    - HomePage\n//    - EventsPage\n//    - EventDetailPage\n//    - NewEventPage\n//    - EditEventPage\n// 2. Add routing & route definitions for these five pages\n//    - / => HomePage\n//    - /events => EventsPage\n//    - /events/<some-id> => EventDetailPage\n//    - /events/new => NewEventPage\n//    - /events/<some-id>/edit => EditEventPage\n// 3. Add a root layout that adds the <MainNavigation> component above all page components\n// 4. Add properly working links to the MainNavigation\n// 5. Ensure that the links in MainNavigation receive an \"active\" class when active\n// 6. Output a list of dummy events to the EventsPage\n//    Every list item should include a link to the respective EventDetailPage\n// 7. Output the ID of the selected event on the EventDetailPage\n// BONUS: Add another (nested) layout route that adds the <EventNavigation> component above all /events... page components\n\nimport { RouterProvider, createBrowserRouter } from 'react-router-dom';\nimport RootsLayout from './pages/Roots';\nimport HomePage from './pages/Home';\nimport EventsPage, { loader as eventsLoader } from './pages/Events';\nimport EventsDetailPage, { loader as eventsDetailLoader, action as deleteEventAction } from './pages/EventsDetail';\nimport NewEventPage from './pages/NewEvent';\nimport EditEventPage from './pages/EditEvent';\nimport EventsRootLayout from './pages/EventsRoots';\nimport ErrorPage from './pages/Error';\nimport { action as manipulateEventAction } from './components/EventForm';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  const router = createBrowserRouter([{\n    path: '/',\n    element: /*#__PURE__*/_jsxDEV(RootsLayout, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 16\n    }, this),\n    errorElement: /*#__PURE__*/_jsxDEV(ErrorPage, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 21\n    }, this),\n    //The error throw in the loader bubbles up to the error element in the root layout\n    children: [{\n      index: true,\n      element: /*#__PURE__*/_jsxDEV(HomePage, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 33\n      }, this)\n    }, {\n      path: 'events',\n      element: /*#__PURE__*/_jsxDEV(EventsRootLayout, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 20\n      }, this),\n      children: [{\n        index: true,\n        element: /*#__PURE__*/_jsxDEV(EventsPage, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 37\n        }, this),\n        loader: eventsLoader //Esse loader é a primeira coisa que renderiza quando se entra nesse site, então é bom botar o fetch no início.\n      }, {\n        path: ':eventId',\n        id: 'event-detail',\n        loader: eventsDetailLoader,\n        children: [\n        //Esse id é para identificar o path, para que o router saiba qual path é qual e o children é para dizer que esse path tem filhos\n        {\n          index: true,\n          element: /*#__PURE__*/_jsxDEV(EventsDetailPage, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 52,\n            columnNumber: 41\n          }, this),\n          action: deleteEventAction\n        }, {\n          path: 'edit',\n          element: /*#__PURE__*/_jsxDEV(EditEventPage, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 53,\n            columnNumber: 42\n          }, this),\n          action: manipulateEventAction\n        }]\n      }, {\n        path: 'new',\n        element: /*#__PURE__*/_jsxDEV(NewEventPage, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 37\n        }, this),\n        action: manipulateEventAction\n      }]\n    }]\n  }]);\n  return /*#__PURE__*/_jsxDEV(RouterProvider, {\n    router: router\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 10\n  }, this);\n}\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["RouterProvider","createBrowserRouter","RootsLayout","HomePage","EventsPage","loader","eventsLoader","EventsDetailPage","eventsDetailLoader","action","deleteEventAction","NewEventPage","EditEventPage","EventsRootLayout","ErrorPage","manipulateEventAction","jsxDEV","_jsxDEV","App","router","path","element","fileName","_jsxFileName","lineNumber","columnNumber","errorElement","children","index","id","_c","$RefreshReg$"],"sources":["C:/Users/LENOVO/Documents/Memberr/React_classes/React_Router_Deep/12-adv-starting-project/frontend/src/App.js"],"sourcesContent":["// Challenge / Exercise\n\n// 1. Add five new (dummy) page components (content can be simple <h1> elements)\n//    - HomePage\n//    - EventsPage\n//    - EventDetailPage\n//    - NewEventPage\n//    - EditEventPage\n// 2. Add routing & route definitions for these five pages\n//    - / => HomePage\n//    - /events => EventsPage\n//    - /events/<some-id> => EventDetailPage\n//    - /events/new => NewEventPage\n//    - /events/<some-id>/edit => EditEventPage\n// 3. Add a root layout that adds the <MainNavigation> component above all page components\n// 4. Add properly working links to the MainNavigation\n// 5. Ensure that the links in MainNavigation receive an \"active\" class when active\n// 6. Output a list of dummy events to the EventsPage\n//    Every list item should include a link to the respective EventDetailPage\n// 7. Output the ID of the selected event on the EventDetailPage\n// BONUS: Add another (nested) layout route that adds the <EventNavigation> component above all /events... page components\n\nimport { RouterProvider, createBrowserRouter } from 'react-router-dom';\nimport RootsLayout from './pages/Roots';\nimport HomePage from './pages/Home';\nimport EventsPage, { loader as eventsLoader } from './pages/Events';\nimport EventsDetailPage, { loader as eventsDetailLoader, action as deleteEventAction } from './pages/EventsDetail';\nimport NewEventPage from './pages/NewEvent';\nimport EditEventPage from './pages/EditEvent';\nimport EventsRootLayout from './pages/EventsRoots';\nimport ErrorPage from './pages/Error';\nimport {action as manipulateEventAction} from './components/EventForm'\n\nfunction App() {\n\n  const router = createBrowserRouter([\n    {\n      path: '/',\n      element: <RootsLayout />,\n      errorElement: <ErrorPage />, //The error throw in the loader bubbles up to the error element in the root layout\n      children: [\n        { index: true, element: <HomePage /> },\n        {\n          path: 'events',\n          element: <EventsRootLayout />,\n          children: [\n            {\n              index: true, element: <EventsPage />, loader: eventsLoader //Esse loader é a primeira coisa que renderiza quando se entra nesse site, então é bom botar o fetch no início.\n            },\n            {\n              path: ':eventId', id:'event-detail', loader: eventsDetailLoader, children: [ //Esse id é para identificar o path, para que o router saiba qual path é qual e o children é para dizer que esse path tem filhos\n                { index: true, element: <EventsDetailPage />, action: deleteEventAction },\n                { path: 'edit', element: <EditEventPage />, action: manipulateEventAction},\n              ]\n            },\n            { path: 'new', element: <NewEventPage />, action: manipulateEventAction },\n          ]\n        },\n      ]\n    }\n  ]);\n\n  return <RouterProvider router={router} />;\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}